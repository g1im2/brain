version: '3.8'

services:
  integration-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: integration_service
    ports:
      - "8088:8088"
    environment:
      # 应用配置
      - INTEGRATION_HOST=0.0.0.0
      - INTEGRATION_PORT=8088
      - INTEGRATION_DEBUG=false
      
      # 服务发现配置
      - MACRO_SERVICE_URL=http://macro-service:8080
      - PORTFOLIO_SERVICE_URL=http://portfolio-service:8080
      - EXECUTION_SERVICE_URL=http://execution-service:8087
      - FLOWHUB_SERVICE_URL=http://flowhub-service:8080
      
      # 数据库配置
      - DATABASE_URL=postgresql://postgres:password@timescaledb:5432/stock_data
      
      # Redis配置
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      
      # 定时任务配置
      - SCHEDULER_ENABLED=true
      - SCHEDULER_TIMEZONE=Asia/Shanghai
      
      # 监控配置
      - MONITORING_ENABLED=true
      
      # 日志配置
      - LOG_LEVEL=INFO
      - LOG_FILE=logs/integration.log
      
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    
    depends_on:
      - redis
      - timescaledb
    
    networks:
      - integration-network
      - external-services
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: integration_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - integration-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TimescaleDB数据库服务
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: integration_timescaledb
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=stock_data
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: integration_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - integration-service
    networks:
      - integration-network
    restart: unless-stopped
    profiles:
      - with-nginx

volumes:
  redis_data:
    driver: local
  timescale_data:
    driver: local

networks:
  integration-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

  # 连接外部服务网络
  external-services:
    external: true
    name: financial_trading_network
